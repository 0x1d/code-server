diff --git a/src/vs/base/node/config.ts b/src/vs/base/node/config.ts
index 0b57853..ad0c604 100644
--- a/src/vs/base/node/config.ts
+++ b/src/vs/base/node/config.ts
@@ -77,0 +78,3 @@ export class ConfigWatcher<T> implements IConfigWatcher<T>, IDisposable {
+			} else {
+				this.cache = config; // update config
+				this._onDidUpdateConfiguration.fire({ config });
diff --git a/src/vs/code/electron-browser/issue/issueReporterMain.ts b/src/vs/code/electron-browser/issue/issueReporterMain.ts
index 90767e1..3163f10 100644
--- a/src/vs/code/electron-browser/issue/issueReporterMain.ts
+++ b/src/vs/code/electron-browser/issue/issueReporterMain.ts
@@ -315 +315 @@ export class IssueReporter extends Disposable {
-			const piiPaths = [this.environmentService.appRoot, this.environmentService.extensionsPath];
+			const piiPaths = [this.environmentService.appRoot, this.environmentService.extensionsPath, ...this.environmentService.extraExtensionPaths];
diff --git a/src/vs/code/electron-browser/sharedProcess/sharedProcessMain.ts b/src/vs/code/electron-browser/sharedProcess/sharedProcessMain.ts
index e270021..91c81b4 100644
--- a/src/vs/code/electron-browser/sharedProcess/sharedProcessMain.ts
+++ b/src/vs/code/electron-browser/sharedProcess/sharedProcessMain.ts
@@ -50,0 +51,2 @@ import { ServiceIdentifier } from 'vs/platform/instantiation/common/instantiatio
+import { BackupMainService } from 'vs/platform/backup/electron-main/backupMainService';
+import { mkdirp } from 'vs/base/node/pfs';
@@ -93,0 +96,10 @@ function main(server: Server, initData: ISharedProcessInitData, configuration: I
+	Promise.all<boolean | undefined>([ // Lifted from src/vs/code/electron-main/main.ts
+		environmentService.extensionsPath,
+		environmentService.nodeCachedDataDir,
+		environmentService.logsPath,
+		environmentService.globalStorageHome,
+		environmentService.workspaceStorageHome,
+		environmentService.backupHome,
+		...environmentService.extraExtensionPaths,
+		...environmentService.extraBuiltinExtensionPaths,
+	].map((path): undefined | Promise<boolean> => path ? mkdirp(path) : undefined));
@@ -124 +136,3 @@ function main(server: Server, initData: ISharedProcessInitData, configuration: I
-		const { appRoot, extensionsPath, extensionDevelopmentLocationURI: extensionDevelopmentLocationURI, isBuilt, installSourcePath } = environmentService;
+		const backupMainService = instantiationService.createInstance(BackupMainService) as BackupMainService;
+		backupMainService.initialize().catch(console.error);
+		const { appRoot, extensionsPath, extensionDevelopmentLocationURI: extensionDevelopmentLocationURI, isBuilt, installSourcePath, extraExtensionPaths } = environmentService;
@@ -138 +152 @@ function main(server: Server, initData: ISharedProcessInitData, configuration: I
-				piiPaths: [appRoot, extensionsPath]
+				piiPaths: [appRoot, extensionsPath, ...extraExtensionPaths]
@@ -223,0 +238 @@ async function handshake(configuration: ISharedProcessConfiguration): Promise<vo
+startup({ machineId: "1" });
diff --git a/src/vs/code/node/cli.ts b/src/vs/code/node/cli.ts
index 7b8222c..7dab7f8 100644
--- a/src/vs/code/node/cli.ts
+++ b/src/vs/code/node/cli.ts
@@ -43,0 +44,3 @@ export async function main(argv: string[]): Promise<any> {
+	const cli = await new Promise<IMainCli>((c, e) => require(['vs/code/node/cliProcessMain'], c, e));
+	await cli.main(args);
+	return; // Always just do this for now.
diff --git a/src/vs/loader.js b/src/vs/loader.js
index 4eddcab..fab87dc 100644
--- a/src/vs/loader.js
+++ b/src/vs/loader.js
@@ -671,4 +671,4 @@ var AMDLoader;
-            this._fs = nodeRequire('fs');
-            this._vm = nodeRequire('vm');
-            this._path = nodeRequire('path');
-            this._crypto = nodeRequire('crypto');
+            this._fs = require('fs');
+            this._vm = require('vm');
+            this._path = require('path');
+            this._crypto = require('crypto');
@@ -736,0 +737,12 @@ var AMDLoader;
+            const context = require.context("../", true, /.*/);
+            if (scriptSrc.indexOf("file:///") !== -1) {
+                let vsSrc = scriptSrc.split("file:///")[1].split(".js")[0];
+                if (this._env.isWindows) {
+                    const vsSrcSplit = vsSrc.split(":/");
+                    vsSrcSplit.shift();
+                    vsSrc = vsSrcSplit.join(":/");
+                }
+                if (vsSrc && vsSrc.startsWith("vs/")) {
+                    scriptSrc = `node|./${vsSrc}`;
+                }
+            }
@@ -741 +753 @@ var AMDLoader;
-                    moduleExports_1 = nodeRequire(pieces[1]);
+                    moduleExports_1 = context(pieces[1]);
diff --git a/src/vs/platform/environment/common/environment.ts b/src/vs/platform/environment/common/environment.ts
index 58cb747..e94b6ca 100644
--- a/src/vs/platform/environment/common/environment.ts
+++ b/src/vs/platform/environment/common/environment.ts
@@ -40,0 +41,2 @@ export interface ParsedArgs {
+	'extra-extension-dirs'?: string[];
+	'extra-builtin-extension-dirs'?: string[];
@@ -123,0 +126,2 @@ export interface IEnvironmentService {
+	extraExtensionPaths: string[];
+	extraBuiltinExtensionPaths: string[];
diff --git a/src/vs/platform/environment/node/environmentService.ts b/src/vs/platform/environment/node/environmentService.ts
index 3c6d378..6482ca9 100644
--- a/src/vs/platform/environment/node/environmentService.ts
+++ b/src/vs/platform/environment/node/environmentService.ts
@@ -178,0 +179,8 @@ export class EnvironmentService implements IEnvironmentService {
+	@memoize
+	get extraExtensionPaths(): string[] {
+		return this._args['extra-extension-dirs'] || [];
+	}
+	@memoize
+	get extraBuiltinExtensionPaths(): string[] {
+		return this._args['extra-builtin-extension-dirs'] || [];
+	}
diff --git a/src/vs/platform/extensionManagement/node/extensionManagementService.ts b/src/vs/platform/extensionManagement/node/extensionManagementService.ts
index 7a94561..c10193f 100644
--- a/src/vs/platform/extensionManagement/node/extensionManagementService.ts
+++ b/src/vs/platform/extensionManagement/node/extensionManagementService.ts
@@ -726 +726 @@ export class ExtensionManagementService extends Disposable implements IExtension
-		const systemExtensionsPromise = this.scanExtensions(this.systemExtensionsPath, ExtensionType.System)
+		const systemExtensionsPromise = this.scanAllExtensions(this.systemExtensionsPath, ExtensionType.System, this.environmentService.extraBuiltinExtensionPaths)
@@ -754 +754 @@ export class ExtensionManagementService extends Disposable implements IExtension
-		return Promise.all([this.getUninstalledExtensions(), this.scanExtensions(this.extensionsPath, ExtensionType.User)])
+		return Promise.all([this.getUninstalledExtensions(), this.scanAllExtensions(this.extensionsPath, ExtensionType.User, this.environmentService.extraExtensionPaths)])
@@ -771,0 +772,6 @@ export class ExtensionManagementService extends Disposable implements IExtension
+	private scanAllExtensions(path: string, type: ExtensionType, extraPaths: string[]): Promise<ILocalExtension[]> {
+		return Promise.all([
+			this.scanExtensions(path, type),
+			...extraPaths.map((p) => this.scanExtensions(p, type))
+		]).then((results) => results.reduce((flat, current) => flat.concat(current), []));
+	}
@@ -798 +804 @@ export class ExtensionManagementService extends Disposable implements IExtension
-			.then(uninstalled => this.scanExtensions(this.extensionsPath, ExtensionType.User) // All user extensions
+			.then(uninstalled => this.scanAllExtensions(this.extensionsPath, ExtensionType.User, this.environmentService.extraExtensionPaths) // All user extensions
@@ -807 +813 @@ export class ExtensionManagementService extends Disposable implements IExtension
-		return this.scanExtensions(this.extensionsPath, ExtensionType.User) // All user extensions
+		return this.scanAllExtensions(this.extensionsPath, ExtensionType.User, this.environmentService.extraExtensionPaths) // All user extensions
diff --git a/src/vs/workbench/api/common/extHostTypeConverters.ts b/src/vs/workbench/api/common/extHostTypeConverters.ts
index 2a499df..1ed108d 100644
--- a/src/vs/workbench/api/common/extHostTypeConverters.ts
+++ b/src/vs/workbench/api/common/extHostTypeConverters.ts
@@ -26 +26 @@ import { ExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocum
-import { isString, isNumber } from 'vs/base/common/types';
+const { isString, isNumber } = require('vs/base/common/types');
@@ -31 +31 @@ import { LogLevel as _MainLogLevel } from 'vs/platform/log/common/log';
-import { coalesce } from 'vs/base/common/arrays';
+const { coalesce } = require('vs/base/common/arrays');
diff --git a/src/vs/workbench/api/node/extHostExtensionService.ts b/src/vs/workbench/api/node/extHostExtensionService.ts
index 3f8a56e..442e670 100644
--- a/src/vs/workbench/api/node/extHostExtensionService.ts
+++ b/src/vs/workbench/api/node/extHostExtensionService.ts
@@ -710 +710 @@ function loadCommonJSModule<T>(logService: ILogService, modulePath: string, acti
-		r = require.__$__nodeRequire<T>(modulePath);
+		r = (global as any).nativeNodeRequire(modulePath);
diff --git a/src/vs/workbench/browser/nodeless.main.ts b/src/vs/workbench/browser/nodeless.main.ts
index 74ff1e9..c0f0158 100644
--- a/src/vs/workbench/browser/nodeless.main.ts
+++ b/src/vs/workbench/browser/nodeless.main.ts
@@ -30,0 +31 @@ class CodeRendererMain extends Disposable {
+		(require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.serviceCollection = services.serviceCollection;
diff --git a/src/vs/workbench/browser/parts/editor/editorGroupView.ts b/src/vs/workbench/browser/parts/editor/editorGroupView.ts
index 57d2939..2533311 100644
--- a/src/vs/workbench/browser/parts/editor/editorGroupView.ts
+++ b/src/vs/workbench/browser/parts/editor/editorGroupView.ts
@@ -1494 +1494 @@ registerThemingParticipant((theme, collector, environment) => {
-	const letterpress = `./media/letterpress${theme.type === 'dark' ? '-dark' : theme.type === 'hc' ? '-hc' : ''}.svg`;
+	const letterpress = theme.type === 'dark' ? require.toUrl('./media/letterpress-dark.svg') : theme.type === 'hc' ? require.toUrl('./media/letterpress-hc.svg') : require.toUrl('./media/letterpress.svg');
@@ -1497 +1497 @@ registerThemingParticipant((theme, collector, environment) => {
-			background-image: url('${require.toUrl(letterpress)}')
+			background-image: url('${letterpress}')
diff --git a/src/vs/workbench/browser/workbench.ts b/src/vs/workbench/browser/workbench.ts
index 1f9fdde..078c1a1 100644
--- a/src/vs/workbench/browser/workbench.ts
+++ b/src/vs/workbench/browser/workbench.ts
@@ -83 +83 @@ export class Workbench extends Layout {
-		(<any>window).require.config({
+		/*(<any>window).require.config({
@@ -89 +89 @@ export class Workbench extends Layout {
-		});
+		});*/
diff --git a/src/vs/workbench/contrib/files/common/explorerModel.ts b/src/vs/workbench/contrib/files/common/explorerModel.ts
index 99d4790..9c37b76 100644
--- a/src/vs/workbench/contrib/files/common/explorerModel.ts
+++ b/src/vs/workbench/contrib/files/common/explorerModel.ts
@@ -77,0 +78 @@ export class ExplorerItem {
+	private forgotChildren: boolean = false;
@@ -248 +249,2 @@ export class ExplorerItem {
-		if (!this._isDirectoryResolved) {
+		if (!this._isDirectoryResolved || this.forgotChildren) {
+			this.forgotChildren = false;
@@ -277,0 +280 @@ export class ExplorerItem {
+		this.forgotChildren = true;
diff --git a/src/vs/workbench/contrib/files/common/explorerService.ts b/src/vs/workbench/contrib/files/common/explorerService.ts
index 6bec4db..0f43623 100644
--- a/src/vs/workbench/contrib/files/common/explorerService.ts
+++ b/src/vs/workbench/contrib/files/common/explorerService.ts
@@ -341 +341 @@ export class ExplorerService implements IExplorerService {
-			if (shouldRefresh()) {
+			if (true || shouldRefresh()) {
diff --git a/src/vs/workbench/contrib/logs/common/logs.contribution.ts b/src/vs/workbench/contrib/logs/common/logs.contribution.ts
index 3ce77b2..33c6606 100644
--- a/src/vs/workbench/contrib/logs/common/logs.contribution.ts
+++ b/src/vs/workbench/contrib/logs/common/logs.contribution.ts
@@ -29 +29,2 @@ class LogOutputChannels extends Disposable implements IWorkbenchContribution {
-		outputChannelRegistry.registerChannel({ id: Constants.mainLogChannelId, label: nls.localize('mainLog', "Main"), file: URI.file(join(environmentService.logsPath, `main.log`)), log: true });
+		// This channel only seems to be used when loading the app and we skip all of that, so it is never actually created or written to.
+		// outputChannelRegistry.registerChannel({ id: Constants.mainLogChannelId, label: nls.localize('mainLog', "Main"), file: URI.file(join(environmentService.logsPath, `main.log`)), log: true });
diff --git a/src/vs/workbench/contrib/output/common/outputLinkProvider.ts b/src/vs/workbench/contrib/output/common/outputLinkProvider.ts
index ad9d566..9c894d8 100644
--- a/src/vs/workbench/contrib/output/common/outputLinkProvider.ts
+++ b/src/vs/workbench/contrib/output/common/outputLinkProvider.ts
@@ -78,0 +79 @@ export class OutputLinkProvider {
+		return Promise.resolve([]);
diff --git a/src/vs/workbench/contrib/webview/browser/pre/main.js b/src/vs/workbench/contrib/webview/browser/pre/main.js
index 133b3d2..f69091a 100644
--- a/src/vs/workbench/contrib/webview/browser/pre/main.js
+++ b/src/vs/workbench/contrib/webview/browser/pre/main.js
@@ -375 +375,3 @@ module.exports = function createWebviewManager(host) {
-					newFrame.contentWindow.focus();
+					if (document.hasFocus()) {
+						newFrame.contentWindow.focus();
+					}
diff --git a/src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts b/src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts
index 40a8c83..579c7e7 100644
--- a/src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts
+++ b/src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts
@@ -32,0 +33 @@ function getSystemExtensionsRoot(): string {
+	return (require('vs/../../../../packages/vscode/src/fill/paths') as typeof import ('vs/../../../../packages/vscode/src/fill/paths')).getBuiltInExtensionsDirectory();
@@ -191,2 +192,3 @@ export class CachedExtensionScanner {
-			const folderStat = await pfs.stat(input.absoluteFolderPath);
-			input.mtime = folderStat.mtime.getTime();
+			const folderStats = await Promise.all([pfs.stat(input.absoluteFolderPath), ...input.extraFolderPaths.map((p) => pfs.stat(p))]);
+			input.mtime = folderStats[0].mtime.getTime();
+			input.extraMtimes = folderStats.slice(1).map((s) => s.mtime.getTime());
@@ -259 +261 @@ export class CachedExtensionScanner {
-			new ExtensionScannerInput(version, commit, locale, devMode, getSystemExtensionsRoot(), true, false, translations),
+			new ExtensionScannerInput(version, commit, locale, devMode, getSystemExtensionsRoot(), true, false, translations, environmentService.extraBuiltinExtensionPaths),
@@ -290 +292 @@ export class CachedExtensionScanner {
-					new ExtensionScannerInput(version, commit, locale, devMode, environmentService.extensionsPath, false, false, translations),
+					new ExtensionScannerInput(version, commit, locale, devMode, environmentService.extensionsPath, false, false, translations, environmentService.extraExtensionPaths),
diff --git a/src/vs/workbench/services/extensions/electron-browser/extensionHost.ts b/src/vs/workbench/services/extensions/electron-browser/extensionHost.ts
index 1707b52..0906abc 100644
--- a/src/vs/workbench/services/extensions/electron-browser/extensionHost.ts
+++ b/src/vs/workbench/services/extensions/electron-browser/extensionHost.ts
@@ -439 +439 @@ export class ExtensionHostProcessWorker implements IExtensionHostStarter {
-		if (errorMessage === this._lastExtensionHostError) {
+		if (errorMessage === this._lastExtensionHostError || errorMessage === "disconnected") {
diff --git a/src/vs/workbench/services/extensions/electron-browser/extensionService.ts b/src/vs/workbench/services/extensions/electron-browser/extensionService.ts
index 6692f75..0168837 100644
--- a/src/vs/workbench/services/extensions/electron-browser/extensionService.ts
+++ b/src/vs/workbench/services/extensions/electron-browser/extensionService.ts
@@ -96,0 +97 @@ export class ExtensionService extends Disposable implements IExtensionService {
+	private readonly retry = (require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.retry.register('Extension Host', () => this.startExtensionHost());
@@ -442,0 +444 @@ export class ExtensionService extends Disposable implements IExtensionService {
+		extHostProcessWorker.start()!.then(() => this.retry.recover());
@@ -449,0 +452 @@ export class ExtensionService extends Disposable implements IExtensionService {
+		return this.retry.run();
diff --git a/src/vs/workbench/services/extensions/node/extensionHostProcessSetup.ts b/src/vs/workbench/services/extensions/node/extensionHostProcessSetup.ts
index cd9d907..7e5f97f 100644
--- a/src/vs/workbench/services/extensions/node/extensionHostProcessSetup.ts
+++ b/src/vs/workbench/services/extensions/node/extensionHostProcessSetup.ts
@@ -232 +232 @@ function connectToRenderer(protocol: IMessagePassingProtocol): Promise<IRenderer
-					process.kill(initData.parentPid, 0); // throws an exception if the main process doesn't exist anymore.
+					// process.kill(initData.parentPid, 0); // throws an exception if the main process doesn't exist anymore.
diff --git a/src/vs/workbench/services/extensions/node/extensionPoints.ts b/src/vs/workbench/services/extensions/node/extensionPoints.ts
index 6e2179d..31edae5 100644
--- a/src/vs/workbench/services/extensions/node/extensionPoints.ts
+++ b/src/vs/workbench/services/extensions/node/extensionPoints.ts
@@ -445,0 +446 @@ export class ExtensionScannerInput {
+	public extraMtimes: number[] = [];
@@ -455 +456,2 @@ export class ExtensionScannerInput {
-		public readonly tanslations: Translations
+		public readonly tanslations: Translations,
+		public readonly extraFolderPaths: string[] = [],
@@ -469,0 +472,17 @@ export class ExtensionScannerInput {
+		// Allow extra folder paths in any order. Doesn't account for duplicates though.
+		const eq = (a: string[] = [], b: string[] = [], atimes: number[] = [], btimes: number[] = []): boolean => {
+			if (a.length !== b.length || atimes.length !== btimes.length) {
+				return false;
+			}
+			for (let i = 0; i < a.length; ++i) {
+				const index = b.indexOf(a[i]);
+				if (index === -1) {
+					return false;
+				}
+				if (atimes[i] !== btimes[index]) {
+					return false;
+				}
+			}
+			return true;
+		};
+
@@ -479,0 +499 @@ export class ExtensionScannerInput {
+			&& eq(a.extraFolderPaths, b.extraFolderPaths, a.extraMtimes, b.extraMtimes)
@@ -532 +552 @@ export class ExtensionScanner {
-	public static async scanExtensions(input: ExtensionScannerInput, log: ILog, resolver: IExtensionResolver | null = null): Promise<IExtensionDescription[]> {
+	public static async scanExtensions(input: ExtensionScannerInput, log: ILog, resolvers: IExtensionResolver | IExtensionResolver[] | null = null): Promise<IExtensionDescription[]> {
@@ -535,0 +556 @@ export class ExtensionScanner {
+		const extraFolderPaths = input.extraFolderPaths;
@@ -537,2 +558,4 @@ export class ExtensionScanner {
-		if (!resolver) {
-			resolver = new DefaultExtensionResolver(absoluteFolderPath);
+		if (!resolvers) {
+			resolvers = [absoluteFolderPath, ...extraFolderPaths].map((p) => new DefaultExtensionResolver(p));
+		} else if (!Array.isArray(resolvers)) {
+			resolvers = [resolvers];
@@ -552 +575,2 @@ export class ExtensionScanner {
-			let refs = await resolver.resolveExtensions();
+			let refs = await Promise.all(resolvers.map((resolver) => resolver.resolveExtensions()))
+				.then((results) => results.reduce((flat, current) => flat.concat(current), []));
diff --git a/src/vs/workbench/services/files/node/watcher/nsfw/watcherService.ts b/src/vs/workbench/services/files/node/watcher/nsfw/watcherService.ts
index 8924e12..7beecb4 100644
--- a/src/vs/workbench/services/files/node/watcher/nsfw/watcherService.ts
+++ b/src/vs/workbench/services/files/node/watcher/nsfw/watcherService.ts
@@ -21,0 +22 @@ export class FileWatcher extends Disposable {
+	private readonly retry = (require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.retry.register('Watcher', () => this.startWatching());
@@ -53,0 +55 @@ export class FileWatcher extends Disposable {
+				return this.retry.run();
@@ -84 +86 @@ export class FileWatcher extends Disposable {
-		this.service.setRoots(folders);
+		this.service.setRoots(folders).then(() => this.retry.recover());
diff --git a/src/vs/workbench/services/files/node/watcher/unix/watcherService.ts b/src/vs/workbench/services/files/node/watcher/unix/watcherService.ts
index 04ce480..6abda1c 100644
--- a/src/vs/workbench/services/files/node/watcher/unix/watcherService.ts
+++ b/src/vs/workbench/services/files/node/watcher/unix/watcherService.ts
@@ -21,0 +22 @@ export class FileWatcher extends Disposable {
+	private readonly retry = (require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.retry.register('Watcher', () => this.startWatching());
@@ -53,0 +55 @@ export class FileWatcher extends Disposable {
+				return this.retry.run();
@@ -84 +86 @@ export class FileWatcher extends Disposable {
-		this.service.setRoots(folders);
+		this.service.setRoots(folders).then(() => this.retry.recover());
diff --git a/src/vs/workbench/services/files/node/watcher/win32/csharpWatcherService.ts b/src/vs/workbench/services/files/node/watcher/win32/csharpWatcherService.ts
index 95d8797..0f5d4cf 100644
--- a/src/vs/workbench/services/files/node/watcher/win32/csharpWatcherService.ts
+++ b/src/vs/workbench/services/files/node/watcher/win32/csharpWatcherService.ts
@@ -23,0 +24 @@ export class OutOfProcessWin32FolderWatcher {
+	private readonly retry = (require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.retry.register('Watcher', () => this.startWatcher());
@@ -56,0 +58 @@ export class OutOfProcessWin32FolderWatcher {
+		this.handle.stdout.once('data', () => this.retry.recover());
@@ -113,0 +116 @@ export class OutOfProcessWin32FolderWatcher {
+			return this.retry.run();
diff --git a/src/vs/workbench/services/search/node/searchService.ts b/src/vs/workbench/services/search/node/searchService.ts
index fcef06a..db26457 100644
--- a/src/vs/workbench/services/search/node/searchService.ts
+++ b/src/vs/workbench/services/search/node/searchService.ts
@@ -458,6 +458,11 @@ export class DiskSearch implements ISearchResultProvider {
-		const client = new Client(
-			getPathFromAmdModule(require, 'bootstrap-fork'),
-			opts);
-
-		const channel = getNextTickChannel(client.getChannel('search'));
-		this.raw = new SearchChannelClient(channel);
+		const connect = (): Promise<void> =>  {
+			const client = new Client(
+				getPathFromAmdModule(require, 'bootstrap-fork'),
+				opts);
+			client.onDidProcessExit(() => retry.run());
+			const channel = getNextTickChannel(client.getChannel('search'));
+			this.raw = new SearchChannelClient(channel);
+			return this.raw.clearCache('test-connectivity');
+		};
+		const retry = (require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.retry.register('Searcher', connect);
+		retry.run();
diff --git a/src/vs/workbench/services/telemetry/electron-browser/telemetryService.ts b/src/vs/workbench/services/telemetry/electron-browser/telemetryService.ts
index d905178..b32043f 100644
--- a/src/vs/workbench/services/telemetry/electron-browser/telemetryService.ts
+++ b/src/vs/workbench/services/telemetry/electron-browser/telemetryService.ts
@@ -41 +41 @@ export class TelemetryService extends Disposable implements ITelemetryService {
-				piiPaths: [environmentService.appRoot, environmentService.extensionsPath]
+				piiPaths: [environmentService.appRoot, environmentService.extensionsPath, ...environmentService.extraExtensionPaths]
